#include<stdio.h>
#include<stdlib.h>
struct node
{
int info;
struct node *link;
};
struct node* creation(struct node *start)
{
struct node *new;
int item;
printf("\nEnter item for starting node::\n");
scanf("%d",&item);
new=(struct node *)malloc(sizeof(struct node));
if(new==NULL)
printf("\nOVERFLOW\n");
else
{
new->info=item;
new->link=NULL;
start=new;
}
return (start);
}
void traverse(struct node * start)
{
struct node *ptr=start;
printf("\nContent of the Linked list:\n");
while(ptr!=NULL)
{
printf("%d\t",ptr->info);
ptr=ptr->link;
}
}
struct node * insert_beg(struct node *start)
{
struct node *new;
int item;
printf("\nEnter item:\n");
scanf("%d",&item);
new=(struct node *)malloc(sizeof(struct node));
if(new==NULL)
printf("\nOVERFLOW\n");
else
{
new->info=item;
new->link=NULL;
if(start==NULL)
start=new;
else
{
new->link=start;
start=new;
}
}
traverse(start);
return (start);
}
struct node * insert_end(struct node *start)
{
struct node *new,*ptr;
int item;
printf("\nEnter item:\n");
scanf("%d",&item);
new=(struct node *)malloc(sizeof(struct node));
if(new==NULL)
printf("\nOVERFLOW\n");
else
{
new->info=item;
new->link=NULL;
if(start==NULL)
start=new;
else
{
ptr=start;
while(ptr->link!=NULL)
ptr=ptr->link;
ptr->link=new;
}
}
traverse(start);
return (start);
}
struct node * insert_loc(struct node *start)
{
struct node *new,*ptr,*prev;
int item,i=1,loc;
printf("\nEnter item and loc:\n");
scanf("%d%d",&item,&loc);
new=(struct node *)malloc(sizeof(struct node));
if(new==NULL)
printf("\nOVERFLOW\n");
else
{
new->info=item;
new->link=NULL;
if(start==NULL)
start=new;
else
{
ptr=start;
while(i<loc&&ptr!=NULL)
{
prev=ptr;
ptr=ptr->link;i++;
}
if(ptr==NULL)
printf("\nLoc not found\n");
else
{
prev->link=new;
new->link=ptr;
}
}
}
traverse(start);
return (start);
}

struct node * delete_beg(struct node *start)
{
struct node *ptr;
if(start==NULL)
printf("\nUNDERFLOW\n");
else
{
ptr=start;
start=start->link;
traverse(start);
free(ptr);
}
return (start);
}
struct node * delete_end(struct node *start)
{
struct node *ptr,*prev;
if(start==NULL)
printf("\nUNDERFLOW\n");
else
{
ptr=start;
while(ptr->link!=NULL)
{
prev=ptr;
ptr=ptr->link;
}
prev->link=NULL;
traverse(start);
free(ptr);
}
return (start);
}
struct node * delete_loc(struct node *start)
{
struct node *ptr,*prev;
int i=1,loc;
printf("\nEnter the loc of deletion:\n");
scanf("%d",&loc);
if(start==NULL)
printf("\nUNDERFLOW\n");
else
{
	ptr=start;
	while(i<loc&&ptr!=NULL)
	{
	prev=ptr;
	ptr=ptr->link;
	i++;
	}
	if(ptr==NULL)
	printf("\nLoc Not found");
	else if(ptr==start)
	start=start->link;
	else
	prev->link=ptr->link;
	
	traverse(start);
	free(ptr);
}
return (start);
}
void searching(struct node * start)
{
struct node *ptr=start;
int item,loc=1;
printf("\nEnter item to be searched:\n");
scanf("%d",&item);
while(ptr!=NULL&&ptr->info!=item)
{
ptr=ptr->link;loc++;
}
if(ptr==NULL)
printf("\n%d not found\n",item);
else
printf("\n%d found at %d position\n",item,loc);
}
void sorting(struct node *start)
{
struct node *ptr1=start,*ptr2;
int temp;
while(ptr1!=NULL)
{
ptr2=ptr1->link;
while(ptr2!=NULL)
{
if(ptr1->info>ptr2->info)
{temp=ptr1->info;ptr1->info=ptr2->info;ptr2->info=temp;}
ptr2=ptr2->link;
}
ptr1=ptr1->link;
}
traverse(start);
}
struct node * reverse(struct node *start)
{
struct node *prev=NULL,*ptr=start,*temp;
while(ptr!=NULL)
{
temp=ptr->link;ptr->link=prev;prev=ptr;ptr=temp;
}
start=prev;
traverse(start);
return start;
}
main()
{
struct node *start=NULL;
int op;
start=creation(start);
do
{
printf("\nPress:\n1->traverse\n2->insert at beg\n3->insert at end\n4->insert at location\n5->delete at beg\n6->delete at end\n7->delete at location\n8->searching\n9->sorting\n10->reverse\n11->exit\nEnter u r choice:\n");
scanf("%d",&op);
switch(op)
{
case 1:traverse(start);break;
case 2:start=insert_beg(start);break;
case 3:start=insert_end(start);break;
case 4:start=insert_loc(start);break;
case 5:start=delete_beg(start);break;
case 6:start=delete_end(start);break;
case 7:start=delete_loc(start);break;
case 8:searching(start);break;
case 9:sorting(start);break;
case 10:reverse(start);break;
case 11:exit(0);
}
}while(op<11);
}
